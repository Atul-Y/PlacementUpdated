int n = nums.size();
for (int i = 0; i < n; i++) {
    int sum = 0; // or any variable like freq map, count etc.
    for (int j = i; j < n; j++) {
        // Expand the window from i to j
        sum += nums[j];

        // Do your check
        if (/* some condition on sum, or size, or frequency */) {
            // Update result or count or max/min
        }
    }
}

⚖️ Difference in philosophy
Fixed window brute force → iterate only windows of length k (j runs i..i+k-1).
Variable window brute force → iterate all possible windows starting at i (so j runs till n-1).

int i = 0, j = 0;
while (j < n) {
    // 1. Expand the window by including nums[j]
    ...

    if (/* condition is satisfied */) {
        // 🟢2. Update answer
        ...
        j++;
    } else {
        // 🟢3. Shrink the window
        while (/* condition is invalid */) {
            ...
            i++;
        }

        // 🟢 4. Recheck and update if now valid again
        if (/* condition is satisfied again */) {   
            ...
        }

        j++;
    }
}


int longestSubarraySumAtMostK(vector<int>& nums, int k) {
    int i = 0, j = 0, sum = 0, maxLen = 0;

    while (j < nums.size()) {
        sum += nums[j];

        if (sum <= k) {
            maxLen = max(maxLen, j - i + 1);
            j++;
        } else {
            while (sum > k) {
                sum -= nums[i];
                i++;
            }
            j++;
        }
    }

    return maxLen;
} 

//brute force 

